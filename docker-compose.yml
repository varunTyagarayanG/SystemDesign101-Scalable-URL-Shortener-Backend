version: '3.8'

services:
  backend:
    build: ./services/backend
    env_file: .env
    depends_on:
      - postgres
      - mongo
      - redis
      - rabbitmq
    ports:
      - "3000:3000"
  auth-service:
    build: ./services/auth-service
    env_file: .env
    depends_on:
      - postgres

  key-generator-service:
    build: ./services/key-generator-service
    env_file: .env
    depends_on:
      - postgres

  analytics-service:
    build: ./services/analytics-service
    env_file: .env
    depends_on:
      - rabbitmq
      - mongo

  postgres:
    image: postgres:13
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  mongo:
    image: mongo:5
    restart: always
    volumes:
      - ./databases/mongodb:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"

  redis:
    image: redis:6
    restart: always
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - backend

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
